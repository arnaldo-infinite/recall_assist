/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;


import Data.ConnectionClass;
import Data.DateManager;
import Interfaces.PredictEvents;
import Data.WordScorer;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author User
 */
public class Main extends javax.swing.JFrame {


    public Main() 
    {
        initComponents();
        model2=(DefaultTableModel)tbl_todayevents.getModel();
    }
    DefaultTableModel model2;
    private String Content="";
    private int sentence_score;
    private int words_score;
    private int words_count;
    private String RID="";
    private String LastDay="";
    String [] Time;
    String [] Contents;
    Connection con;
    ConnectionClass objcon= new ConnectionClass();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_todayevents = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        label_content = new javax.swing.JLabel();
        but_save = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(765, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(765, 474));

        tbl_todayevents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Content"
            }
        ));
        jScrollPane1.setViewportView(tbl_todayevents);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(420, 60, 310, 380);

        jButton3.setText("Start Recording");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(200, 210, 120, 40);

        jLabel1.setText("Today Events");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(420, 40, 70, 14);

        label_content.setText("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz");
        getContentPane().add(label_content);
        label_content.setBounds(90, 280, 400, 14);

        but_save.setText("Save");
        but_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_saveActionPerformed(evt);
            }
        });
        getContentPane().add(but_save);
        but_save.setBounds(20, 340, 120, 40);

        jButton5.setText("Predict Events");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(610, 10, 120, 40);

        jButton6.setText("View Events");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(20, 400, 120, 40);

        jLabel3.setFont(new java.awt.Font("Tekton Pro", 1, 24)); // NOI18N
        jLabel3.setText("Main Panel");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 10, 103, 25);

        jLabel2.setText("You Said - ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 280, 60, 14);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    public void setContent (String Content)
   {
       this.Content=Content;
   }
    
    
    
    
    
    
    
    

   
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        viewRecorder();
    }//GEN-LAST:event_jButton3ActionPerformed

   
    
    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setSaidLabel();
        fillTable();
    }//GEN-LAST:event_formWindowOpened

    private void but_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_saveActionPerformed
        insertData ();
        Content="";
        label_content.setText(Content);
    }//GEN-LAST:event_but_saveActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        callViewEvents();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        callPredictEvents();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void callViewEvents()
    {
        ViewEvents obj = new ViewEvents();
        obj.show();
        this.dispose();
    }
    
    private void callPredictEvents()
    {
        PredictEvents obj = new PredictEvents();
        obj.show();
        this.dispose();
    }
    
     private void viewRecorder()
    {
        Record obj = new Record();
        obj.show();
        this.dispose();
    }
     
     private void setSaidLabel()
     {
         label_content.setText(Content);
     }
     
     private void genScores(String Content)
     {
         WordScorer obj = new WordScorer(Content);
         obj.processData();
         this.sentence_score=obj.gettotalscore();
         
         obj.processUnwantedData();
         this.words_score=obj.gettotalscore();
         this.words_count=obj.getarraywords().length;
     }
     
     private String getToday()
     {
         String Today="";
         
         DateManager dmanager = new DateManager();
         Today=dmanager.getToday();
         
         return Today;
     }
     
     private void genRID()
     {
         String RID="";
         con=objcon.getConnection();
         try
         {
            String ID="";
           
            PreparedStatement stat1=con.prepareStatement("select RID from recording order by RID asc");
            ResultSet rst1=stat1.executeQuery();
            
            while (rst1.next())
            {
                ID = rst1.getString("RID");
            }
            
            ID = ID.substring(ID.lastIndexOf('-') + 1);
          

            int IDS = Integer.parseInt(ID);
            IDS=IDS+1;
            
            RID=String.valueOf(IDS);
            stat1.close();
         }
         catch (Exception e1)
         {
             JOptionPane.showMessageDialog(null,"Error Generating RID "+e1.toString());
         }
         finally
         {
             try {
                 con.close();
             } catch (SQLException ex) {
                 Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
         this.RID=RID;
     }
     
     private void lastDate()
     {
        String date="";
         con=objcon.getConnection();
         try
         {
            String temp="";
           
            PreparedStatement stat1=con.prepareStatement("select RID from recording order by RID asc");
            ResultSet rst1=stat1.executeQuery();
            
            while (rst1.next())
            {
                temp = rst1.getString("RID").trim();
            }
         
            date=temp.substring(0,10);
            stat1.close();
         }
         catch (Exception e1)
         {
             JOptionPane.showMessageDialog(null,"Error Generating lastDate "+e1.toString());
         }
         finally
         {
            try {
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
         this.LastDay=date;
     }
     
     private void insertData ()
     {
         if (Content.length()>0)
         {
            String Today = getToday();
            Today = Today.substring(0,10);

            lastDate();
            String LastDaystring = this.LastDay;

            genScores(Content);

            Calendar cal = Calendar.getInstance();
            java.sql.Timestamp timestamp = new java.sql.Timestamp(cal.getTimeInMillis());

            if (Today.equals(LastDaystring))
            {
                genRID();
                con=objcon.getConnection();
                try
                {
                    PreparedStatement stat2=con.prepareStatement("insert into recording values (?,?,?,?)");

                        stat2.setString(1,this.RID);
                        stat2.setString(2,this.Content);
                        stat2.setInt(3,this.sentence_score);
                        stat2.setTimestamp(4,timestamp);

                        int row1=stat2.executeUpdate();

                        stat2.close();

                    PreparedStatement stat3=con.prepareStatement("insert into word values (?,?,?)"); 

                        stat2.setString(1,this.RID);
                        stat2.setInt(2,this.words_score);
                        stat2.setInt(3,this.words_count);

                        int row2=stat3.executeUpdate();

                        if (row1>0 && row2>0){
                            JOptionPane.showMessageDialog(null,"Record Inserted");
                        }
                        else {
                            JOptionPane.showMessageDialog(null,"Record Not Inserted !");
                        }

                }
                catch (Exception e2)
                {
                    JOptionPane.showMessageDialog(null,"Error Inserting Record"+e2.toString());
                }
            }
            else
            {
                con=objcon.getConnection();
                String newRID=Today;
                newRID = newRID+"-1";
                try
                {
                    PreparedStatement stat2=con.prepareStatement("insert into recording values (?,?,?,?)");

                        stat2.setString(1,newRID);
                        stat2.setString(2,this.Content);
                        stat2.setInt(3,this.sentence_score);
                        stat2.setTimestamp(4,timestamp);

                        int row1=stat2.executeUpdate();

                        stat2.close();

                    PreparedStatement stat3=con.prepareStatement("insert into word values (?,?,?)"); 

                        stat3.setString(1,newRID);
                        stat3.setInt(2,this.words_score);
                        stat3.setInt(3,this.words_count);

                        int row2=stat3.executeUpdate();


                        if (row1>0 && row2>0){
                            JOptionPane.showMessageDialog(null,"Record Inserted");
                        }
                        else {
                            JOptionPane.showMessageDialog(null,"Record Not Inserted !");
                        }
                        stat3.close();
                }
                catch (Exception e2)
                {
                    JOptionPane.showMessageDialog(null,"Error Inserting Record"+e2.toString());
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"No Recording was made");
        }
     }
     
     
     private void fillTable()
     {
         String Today = getToday();
         Today = Today.substring(0,10);
         Today=Today+"%";
         int temp=0;
         con=objcon.getConnection();
         try
         {
            PreparedStatement stat1=con.prepareStatement("select RID,Content,RDate from recording where RID like '"+Today+"' order by RID asc");
            ResultSet rst1=stat1.executeQuery();
            
            while (rst1.next())
            {
                temp ++;
            }
            stat1.close();
        }
         catch (Exception e1)
         {
             JOptionPane.showMessageDialog(null,"Error Generating Table 1 "+e1.toString());
         }
         finally
         {
            try {
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
         
         if (temp>0)
         {
            Time = new String[temp];
            Contents = new String[temp];
            filltable2(temp, Today);
         }
     }
     
     private void filltable2(int temp, String Today)
     {
         int count=0;
         con=objcon.getConnection();
         try
         {
                PreparedStatement stat2=con.prepareStatement("select RID,Content,RDate from recording where RID like '"+Today+"' order by RID asc");
                ResultSet rst2=stat2.executeQuery();
                while (rst2.next())
            {
                Contents[count]=rst2.getString("Content");
                Time[count]=rst2.getString("RDate");
                count++;
            }
         }
         catch (Exception e1)
         {
             JOptionPane.showMessageDialog(null,"Error Generating Table 2 "+e1);
         }
         finally
         {
            try {
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
        for(int i =0 ; i<count;i++)
        {
        model2.addRow(new Object[]{Time[i],Contents[i]});
        }
        
     }
    
 
       
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_save;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_content;
    private javax.swing.JTable tbl_todayevents;
    // End of variables declaration//GEN-END:variables
}
